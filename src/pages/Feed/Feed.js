import { useCallback, useEffect, useState } from 'react'
import axios from 'axios'
import moment from 'moment'
import { API_URL } from 'config/api'
import NavLink from '../../components/Navbar/index'
import { useRef } from 'react'
import Spinner from 'components/loaders/Spinner'
// import LikeButton from 'components/LikeButton'

const Feed = () => {
  const [data, setData] = useState([])
  const [loading, setLoading] = useState(true)

  const getData = async () => {
    await axios.get(`${API_URL}/api/feeds`).then((res) => {
      setLoading(false)
      setData(res.data)
    })
  }

  useEffect(() => {
    getData()
  }, []) // eslint-disable-line react-hooks/exhaustive-deps

  data.sort((a, b) => {
    return new Date(b.created_at) - new Date(a.created_at)
  })

  const observer = useRef()

  const [feedList, setFeedList] = useState([])
  const [feedListLength, setFeedListLength] = useState(0)
  const [feedListLengthMax, setFeedListLengthMax] = useState(0)
  const [isIntersecting, setIsIntersecting] = useState(false)

  useEffect(() => {
    setFeedList(data.slice(0, 5))
    setFeedListLength(5)
    setFeedListLengthMax(data.length)
  }, [data])

  const handleLoadMore = () => {
    setFeedListLength(feedListLength + 5)
    setFeedList(data.slice(0, feedListLength + 5))
  }

  const last = useCallback((node) => {
    if (observer.current) observer.current.disconnect()
    observer.current = new IntersectionObserver((entries) => {
      if (entries[0].isIntersecting) {
        setIsIntersecting(true)
      }
    })
    if (node) observer.current.observe(node)
  }, [])

  useEffect(() => {
    if (isIntersecting) {
      setTimeout(() => {
        handleLoadMore()
        setIsIntersecting(false)
      }, 500)
    }
  }, [isIntersecting]) // eslint-disable-line react-hooks/exhaustive-deps

  useEffect(() => {
    window.scrollTo({ top: 0, left: 0, behavior: 'smooth' })
  }, [])

  return (
    <div style={{ maxWidth: '430px' }} className={`mx-auto`}>
      <NavLink />
      <div
        className="fixed z-50 h-[72px] max-w-[430px] w-full flex items-center top-0 bg-white px-[20px] justify-center"
        style={{ boxShadow: '0 5px 5px -5px rgb(0 0 0 / 0.1)' }}
      >
        <svg
          width={75}
          height={23}
          viewBox="0 0 75 23"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M74.9775 12.1284C74.9778 13.743 75.0376 15.3605 74.9611 16.9716C74.8836 18.6061 74.6131 20.2051 73.3031 21.4094C72.4296 22.2126 71.3587 22.5242 70.2376 22.738C68.2182 23.1231 66.2847 22.9755 64.5441 21.7661C63.9506 21.3537 63.5093 20.8143 63.7005 20.0243C63.9204 19.1147 64.6954 18.7584 65.7418 19.0745C66.6617 19.3522 67.5428 19.761 68.551 19.6616C69.1632 19.6012 69.7461 19.4618 70.3072 19.2335C70.6689 19.0862 70.9567 18.8269 71.15 18.4759C71.2832 18.2339 71.4484 17.9461 71.2968 17.7148C71.1354 17.4691 70.8996 17.7585 70.7012 17.8025C68.2178 18.3521 65.57 17.4889 64.4315 15.5071C63.9662 14.6974 63.7558 13.8169 63.7193 12.8984C63.6346 10.7633 63.5197 8.62378 63.7866 6.49541C63.9099 5.51226 64.6364 4.9769 65.5616 5.0539C66.4943 5.13156 67.0429 5.774 67.1286 6.76402C67.2927 8.65262 67.1269 10.5454 67.2339 12.4319C67.3287 14.1041 68.9189 14.9496 70.4049 14.1638C71.1773 13.7552 71.4669 13.0726 71.4732 12.2519C71.4869 10.4982 71.4724 8.74421 71.483 6.99042C71.4872 6.29561 71.7137 5.70407 72.3225 5.28545C73.2872 4.62222 74.9473 5.12466 74.9724 7.03393C74.9947 8.73179 74.9771 10.4302 74.9775 12.1284Z"
            fill="#E7513B"
          />
          <path
            d="M55.5702 11.5992C55.5709 13.074 55.5616 14.5487 55.5746 16.0233C55.5812 16.7695 55.3554 17.3781 54.6712 17.7491C53.9849 18.1212 53.3132 18.0211 52.7514 17.532C52.4902 17.3044 52.3256 17.4024 52.1097 17.4921C50.0927 18.3305 48.1534 18.0803 46.3686 16.9205C44.9945 16.0275 44.426 14.5967 44.3751 13.0127C44.3108 11.0112 44.3494 9.00631 44.3583 7.00295C44.3634 5.8278 45.0408 4.98224 46.0219 5.04303C47.1844 5.11493 47.6407 5.50429 47.8319 6.88787C47.9187 7.51614 47.8515 8.16581 47.8522 8.80572C47.8532 9.9466 47.8461 11.0874 47.8544 12.2282C47.8642 13.5461 48.7435 14.4557 50.0036 14.4682C51.1574 14.4795 52.0717 13.5242 52.0784 12.2764C52.0872 10.6069 52.0648 8.93723 52.0881 7.268C52.0985 6.51256 52.2636 5.77669 52.93 5.3024C53.4623 4.92353 54.0848 4.88934 54.6478 5.19103C55.2774 5.52827 55.5696 6.11965 55.5696 6.8411C55.5696 8.42714 55.5696 10.0132 55.5702 11.5992Z"
            fill="#E7513B"
          />
          <path
            d="M57.923 8.90129C57.9239 6.62239 57.9044 4.34328 57.9311 2.06471C57.9478 0.643906 58.7553 -0.102383 59.9824 0.0842302C60.8537 0.216714 61.3601 0.880522 61.4016 2.03766C61.4355 2.98139 61.4118 3.9272 61.4119 4.87211C61.4123 8.37376 61.4079 11.8755 61.417 15.3772C61.4182 15.8266 61.3777 16.265 61.2457 16.6898C61.0268 17.3937 60.4317 17.7979 59.6785 17.8097C58.8805 17.8221 58.368 17.4299 58.0932 16.7121C57.9439 16.3221 57.9154 15.9088 57.9172 15.4878C57.9271 13.2923 57.9219 11.0969 57.923 8.90129Z"
            fill="#E7513B"
          />
          <path
            d="M12.8274 9.55624C11.8021 6.09895 8.00326 4.13943 4.50541 5.29498C3.79765 5.52878 3.13355 6.0018 2.48555 5.20694C2.42938 5.13815 2.28378 5.13439 2.177 5.11527C0.915683 4.88911 0.0169748 5.70685 0.00872269 7.13427C-0.00659691 9.77851 0.00369786 12.4229 0.00361615 15.0672C0.00361615 16.9879 -0.00720931 18.9085 0.00860051 20.8291C0.0192221 22.1184 0.578203 22.7929 1.60237 22.8183C2.81397 22.8483 3.46315 22.2623 3.49444 21.0352C3.52578 19.8125 3.50135 18.5883 3.50135 17.2921C6.22407 18.051 6.91521 18.1127 8.2733 17.7357C11.8288 16.7488 13.8722 13.079 12.8274 9.55624ZM6.48389 14.4926C5.09291 14.5108 3.51225 13.3827 3.51667 11.4059C3.52067 9.6582 4.86916 8.40249 6.6562 8.42058C8.41403 8.43835 9.60263 9.68124 9.58755 11.4861C9.57252 13.2887 8.31942 14.4688 6.48389 14.4926Z"
            fill="#E7513B"
          />
          <path
            d="M42.1789 8.48045C42.1788 6.22667 42.1942 3.97265 42.1723 1.71903C42.1598 0.439011 41.1171 -0.283951 39.913 0.105412C39.1362 0.356612 38.7155 1.07373 38.6984 2.24317C38.6822 3.35292 38.6949 4.46312 38.6949 5.65413C38.478 5.58909 38.3986 5.57402 38.3266 5.5424C35.692 4.38595 33.2568 4.83369 31.2052 6.73148C29.213 8.57421 28.634 10.9413 29.4888 13.546C30.6819 17.1823 34.8804 18.9341 38.4082 17.332C38.6532 17.2208 38.9127 16.9406 39.2241 17.2763C39.8062 17.904 40.5244 17.9997 41.2602 17.6294C42.0161 17.2488 42.1888 16.539 42.1841 15.7428C42.17 13.322 42.179 10.9013 42.1789 8.48045ZM38.6797 11.4133C38.6858 13.2207 37.4412 14.4836 35.6536 14.4835C33.9264 14.4834 32.7011 13.1951 32.6082 11.4662C32.5256 9.92883 34.0379 8.35034 35.6776 8.386C37.3835 8.42313 38.7698 9.82616 38.6797 11.4133Z"
            fill="#E7513B"
          />
          <path
            d="M25.6342 12.6243C26.8714 12.62 27.7256 11.6455 27.5197 10.4492C26.7194 5.79842 21.7662 3.41457 17.6414 5.96563C15.3029 7.41193 14.3457 9.66766 14.6955 12.3604C15.0289 14.9273 16.5568 16.6881 18.9685 17.5743C21.4396 18.4824 24.0599 17.8132 25.6744 16.0783C26.2116 15.501 26.3287 14.7518 25.9303 14.19C25.4803 13.5557 24.8622 13.5297 24.1568 13.7521C23.6512 13.9114 23.2105 14.1885 22.7287 14.3858C21.0203 15.0846 19.0992 14.5047 18.468 12.6269C20.907 12.6269 23.2707 12.6329 25.6342 12.6243ZM21.3975 8.4528C22.3888 8.55052 23.2002 8.97706 23.7715 9.98284H18.4751C19.2088 8.87411 20.141 8.3289 21.3975 8.4528Z"
            fill="#E7513B"
          />
        </svg>
      </div>
      {!loading ? (
        <div className="mt-[72px] mb-[72px]">
          {feedList.map((data) => (
            <>
              <div key={data.id} className="px-[20px]">
                <div className="pt-[24px] grid grid-cols-12">
                  {data.user.photo ? (
                    <div className="w-[48px] h-[48px] rounded-full col-span-1 bg-[#C4C4C4]">
                      <img
                        className="w-full h-full rounded-full object-cover"
                        src={
                          data.user.photo.slice(0, 4) === 'http'
                            ? data.user.photo
                            : data.user.photo.slice(0, 7) === '/images'
                            ? `${API_URL}${data.user.photo}`
                            : `${API_URL}/images/images_profile/${data.user.photo}`
                        }
                        alt=""
                        onError={() => (
                          <svg
                            width="40"
                            height="40"
                            viewBox="0 0 40 40"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              opacity="0.4"
                              d="M20 40.5383C31.0457 40.5383 40 31.584 40 20.5383C40 9.49264 31.0457 0.53833 20 0.53833C8.95431 0.53833 0 9.49264 0 20.5383C0 31.584 8.95431 40.5383 20 40.5383Z"
                              fill="#E7513B"
                            />
                            <path
                              d="M21.4787 28.0649C21.828 28.0649 22.1093 28.3489 22.1093 28.6969C22.1093 29.0462 21.828 29.3289 21.4787 29.3289H10.8413C10.4933 29.3289 10.2094 29.0462 10.2094 28.6969C10.2094 24.3382 13.428 20.2089 17.9173 20.2089C18.2667 20.2089 18.5493 20.4916 18.5493 20.8409C18.5493 21.1889 18.2667 21.4729 17.9173 21.4729C14.4147 21.4729 11.7853 24.5915 11.4987 28.0649H21.4787ZM20.208 18.9889C17.9053 18.9889 16.0387 17.1329 16.0387 14.8422C16.0387 12.5516 17.9067 10.6956 20.208 10.6956C22.5093 10.6956 24.3773 12.5516 24.3773 14.8422C24.3773 17.1329 22.5107 18.9889 20.208 18.9889ZM20.208 17.7262C21.8147 17.7262 23.1147 16.4342 23.1147 14.8422C23.1147 13.2502 21.8147 11.9582 20.208 11.9582C18.6013 11.9582 17.3013 13.2502 17.3013 14.8422C17.3013 16.4342 18.6013 17.7262 20.208 17.7262ZM26.336 20.2262C27.2627 20.1262 28.188 20.4355 28.8613 21.0715L28.8667 21.0769C29.456 21.6475 29.7893 22.4289 29.7893 23.2435C29.7893 24.0609 29.456 24.8422 28.868 25.4129L25.02 29.1489C24.7733 29.3875 24.384 29.3875 24.14 29.1489L20.2933 25.4142C19.7027 24.8422 19.3693 24.0609 19.3693 23.2449C19.3693 22.4289 19.7027 21.6475 20.2987 21.0715C20.972 20.4355 21.8973 20.1262 22.824 20.2262C23.4827 20.2982 24.0947 20.5702 24.58 20.9982C25.0653 20.5702 25.6773 20.2969 26.336 20.2262ZM26.472 21.4809C25.9133 21.5422 25.412 21.8422 25.104 22.2982C24.8533 22.6702 24.3067 22.6702 24.0573 22.2982C23.7493 21.8422 23.248 21.5422 22.6893 21.4809C22.1293 21.4209 21.5707 21.6089 21.172 21.9835C20.8267 22.3182 20.6333 22.7729 20.6333 23.2449C20.6333 23.7169 20.828 24.1715 21.1733 24.5062L24.5813 27.8142L27.9893 24.5049C28.336 24.1702 28.528 23.7169 28.528 23.2435C28.528 22.7715 28.3347 22.3209 27.992 21.9862C27.5853 21.6075 27.0293 21.4209 26.472 21.4809Z"
                              fill="#E7513B"
                            />
                          </svg>
                        )}
                      />
                    </div>
                  ) : (
                    <div className="w-[48px] h-[48px] rounded-full col-span-1 bg-[#C4C4C4] flex items-center justify-center">
                      <svg
                        width={40}
                        height={40}
                        viewBox="0 0 40 40"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          opacity="0.4"
                          d="M20 40C31.0457 40 40 31.0457 40 20C40 8.95431 31.0457 0 20 0C8.95431 0 0 8.95431 0 20C0 31.0457 8.95431 40 20 40Z"
                          fill="#C4C4C4"
                        />
                        <path
                          d="M21.4787 27.5265C21.828 27.5265 22.1093 27.8105 22.1093 28.1585C22.1093 28.5079 21.828 28.7905 21.4787 28.7905H10.8413C10.4933 28.7905 10.2094 28.5079 10.2094 28.1585C10.2094 23.7999 13.428 19.6705 17.9173 19.6705C18.2667 19.6705 18.5493 19.9532 18.5493 20.3025C18.5493 20.6505 18.2667 20.9345 17.9173 20.9345C14.4147 20.9345 11.7853 24.0532 11.4987 27.5265H21.4787ZM20.208 18.4505C17.9053 18.4505 16.0387 16.5945 16.0387 14.3039C16.0387 12.0132 17.9067 10.1572 20.208 10.1572C22.5093 10.1572 24.3773 12.0132 24.3773 14.3039C24.3773 16.5945 22.5107 18.4505 20.208 18.4505ZM20.208 17.1879C21.8147 17.1879 23.1147 15.8959 23.1147 14.3039C23.1147 12.7119 21.8147 11.4199 20.208 11.4199C18.6013 11.4199 17.3013 12.7119 17.3013 14.3039C17.3013 15.8959 18.6013 17.1879 20.208 17.1879ZM26.336 19.6879C27.2627 19.5879 28.188 19.8972 28.8613 20.5332L28.8667 20.5385C29.456 21.1092 29.7893 21.8905 29.7893 22.7052C29.7893 23.5225 29.456 24.3039 28.868 24.8745L25.02 28.6105C24.7733 28.8492 24.384 28.8492 24.14 28.6105L20.2933 24.8759C19.7027 24.3039 19.3693 23.5225 19.3693 22.7065C19.3693 21.8905 19.7027 21.1092 20.2987 20.5332C20.972 19.8972 21.8973 19.5879 22.824 19.6879C23.4827 19.7599 24.0947 20.0319 24.58 20.4599C25.0653 20.0319 25.6773 19.7585 26.336 19.6879ZM26.472 20.9425C25.9133 21.0039 25.412 21.3039 25.104 21.7599C24.8533 22.1319 24.3067 22.1319 24.0573 21.7599C23.7493 21.3039 23.248 21.0039 22.6893 20.9425C22.1293 20.8825 21.5707 21.0705 21.172 21.4452C20.8267 21.7799 20.6333 22.2345 20.6333 22.7065C20.6333 23.1785 20.828 23.6332 21.1733 23.9679L24.5813 27.2759L27.9893 23.9665C28.336 23.6319 28.528 23.1785 28.528 22.7052C28.528 22.2332 28.3347 21.7825 27.992 21.4479C27.5853 21.0692 27.0293 20.8825 26.472 20.9425Z"
                          fill="#212121"
                        />
                      </svg>
                    </div>
                  )}

                  <div className="pl-[16px] ml-[16px] col-span-11">
                    <div className="flex flex-row items-center justify-between">
                      <div>
                        <p className="font-semibold text-large mb-[2px]">
                          {data.user.name}
                        </p>
                        <p className="text-[12px] text-[#717171]">
                          {moment(data.created_at).fromNow()}
                        </p>
                      </div>
                      <img
                        className="cursor-pointer"
                        src="/icon/dots.svg"
                        alt=""
                      />
                    </div>

                    <div className="mt-[14px] mb-[20px]">
                      <p className="text-large">{data.content}</p>

                      <div className="my-[20px] border-[1px] border-peduly-primary rounded-[15px]">
                        <p className="px-[14px] py-[12px] text-[14px] text-[#717171]">
                          Pesan untuk{' '}
                          <span className="text-peduly-primary font-semibold">
                            <a
                              href={data.insertion_link}
                              target="_blank"
                              rel="noreferrer"
                            >
                              {data.insertion_link_title}
                            </a>
                          </span>
                        </p>
                      </div>

                      {/* <div className="flex font-medium text-[#717171] space-x-4">
                      <LikeButton likeCount={Number(data.likes_count)} />
                    </div> */}
                    </div>
                  </div>
                </div>
              </div>
              <hr className="h-[1px]" />
            </>
          ))}
          {feedListLength < feedListLengthMax && (
            <div className="w-full flex justify-center items-center" ref={last}>
              {isIntersecting && <Spinner color="#e7513b" />}
            </div>
          )}
        </div>
      ) : (
        <div className="mx-auto max-w-[430px] h-screen flex items-center justify-center">
          <Spinner color="#e7513b" />
        </div>
      )}
    </div>
  )
}

export default Feed
